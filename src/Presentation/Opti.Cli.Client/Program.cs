using Opti.Cli.Business.Factories;
using Opti.Cli.Business.Handlers;
using Opti.Cli.Business.Interfaces.Factories;
using Opti.Cli.Business.Interfaces.Handlers;
using Opti.Cli.Business.Interfaces.Services;
using Opti.Cli.Business.Services;
using Opti.Cli.DataAccess.Interfaces.Repositories;
using Opti.Cli.DataAccess.Interfaces.Services;
using Opti.Cli.DataAccess.Repositories;
using Opti.Cli.DataAccess.Services;
using Opti.Cli.Domain.Mappers;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

using IHost host = Host.CreateDefaultBuilder(args)
    .ConfigureServices((_, services) =>
        services
            .AddScoped<ICommandMapper, CommandMapper>()
            .AddScoped<ICommandTypeMapper, CommandTypeMapper>()
            .AddScoped<IObjectTypeMapper, ObjectTypeMapper>()
            .AddScoped<IFileService, FileService>()
            .AddScoped<ITemplateRepository, TemplateRepository>()
            .AddScoped<ICommandHandlerFactory, CommandHandlerFactory>()
            .AddScoped<ICommandHandler, GeneratePageCommandHandler>()
            .AddScoped<ICommandHandler, GenerateBlockCommandHandler>()
            .AddScoped<ICommandService, CommandService>())
    .Build();

IServiceProvider services = host.Services;

using IServiceScope serviceScope = services.CreateScope();
IServiceProvider provider = serviceScope.ServiceProvider;

ICommandService commandService = provider.GetRequiredService<ICommandService>();

await commandService.ExecuteAsync("generate page Test");

Console.WriteLine("Generated!");

//if (args.Length == 0)
//{
//    var versionString = Assembly.GetEntryAssembly()?
//                            .GetCustomAttribute<AssemblyInformationalVersionAttribute>()?
//                            .InformationalVersion
//                            .ToString();

//    Console.WriteLine($"botsay v{versionString}");
//    Console.WriteLine("-------------");
//    Console.WriteLine("\nUsage:");
//    Console.WriteLine("  botsay <message>");
//    return;
//}

//ShowBot(string.Join(' ', args));


//static void ShowBot(string message)
//{
//    string bot = $"\n        {message}";
//    bot += @"
//    __________________
//                      \
//                       \
//                          ....
//                          ....'
//                           ....
//                        ..........
//                    .............'..'..
//                 ................'..'.....
//               .......'..........'..'..'....
//              ........'..........'..'..'.....
//             .'....'..'..........'..'.......'.
//             .'..................'...   ......
//             .  ......'.........         .....
//             .    _            __        ......
//            ..    #            ##        ......
//           ....       .                 .......
//           ......  .......          ............
//            ................  ......................
//            ........................'................
//           ......................'..'......    .......
//        .........................'..'.....       .......
//     ........    ..'.............'..'....      ..........
//   ..'..'...      ...............'.......      ..........
//  ...'......     ...... ..........  ......         .......
// ...........   .......              ........        ......
//.......        '...'.'.              '.'.'.'         ....
//.......       .....'..               ..'.....
//   ..       ..........               ..'........
//          ............               ..............
//         .............               '..............
//        ...........'..              .'.'............
//       ...............              .'.'.............
//      .............'..               ..'..'...........
//      ...............                 .'..............
//       .........                        ..............
//        .....
//";
//    Console.WriteLine(bot);
//}